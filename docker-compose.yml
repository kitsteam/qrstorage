version: "3.8"

services:
  app:
    build:
      context: .
      target: development
    tty: true
    environment:
      DATABASE_USER: ${POSTGRES_USER:-qrstorage-user}
      DATABASE_USER_PASSWORD: ${POSTGRES_PASSWORD:-qrstorage-password}
      DATABASE_NAME: ${POSTGRES_DB:-qrstorage-dev}
      DATABASE_PORT: 5432
      DATABASE_HOST: postgres
      DATABASE_SSL: "false"
      OBJECT_STORAGE_SCHEME: http
      OBJECT_STORAGE_PORT: 9000
      OBJECT_STORAGE_REGION: eu01
      OBJECT_STORAGE_USER: ${MINIO_USER:-minio-user}
      OBJECT_STORAGE_PASSWORD: ${MINIO_USER_PASSWORD:-minio-user-password}
      OBJECT_STORAGE_HOST: ${MINIO_HOST:-minio}
      OBJECT_STORAGE_BUCKET: qrstorage-dev
      QR_CODE_DEFAULT_LOCALE: "de"
      # GCP_CONFIG_PATH: ".gcp-config.json"
      # Please create a new secret for production runs:
      # - Use `mix phx.gen.secret` if you have elixir and phoenix installed
      # - Use `openssl rand -base64 64 | head -c 64` on a normal unix system
      # You can override this in `docker-compose.override.yml`
      SECRET_KEY_BASE: "this_secret_key_base_needs_to_have_a_length_of_at_least_64_characters_like_this_one!"
      URL_HOST: localhost
      URL_SCHEME: http
      URL_PORT: "4000"
    ports:
      - "4000:4000"
    depends_on:
      - postgres
      - minio
    # Mount the lib and test folder to increase development speed (do not use for prod setups!)
    volumes:
      # Ensure that the file `gcp-config.json` is available in the container
      # You can override this in `docker-compose.override.yml`
      - ./:/app
      - /app/deps/
      - /app/assets/node_modules

  app_prod:
    build:
      context: .
      target: production
    profiles:
      - prod
    environment:
      DATABASE_USER: ${POSTGRES_USER:-postgres}
      DATABASE_USER_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DATABASE_NAME: ${POSTGRES_DB:-qrstorage_dev}
      DATABASE_PORT: 5432
      DATABASE_HOST: postgres
      DATABASE_SSL: "false"
      OBJECT_STORAGE_SCHEME: https
      OBJECT_STORAGE_PORT: 443
      OBJECT_STORAGE_REGION: eu01
      OBJECT_STORAGE_USER: ${OBJECT_STORAGE_USER:-object-storage-user}
      OBJECT_STORAGE_PASSWORD: ${OBJECT_STORAGE_USER_PASSWORD:-object-storage-user-password}
      OBJECT_STORAGE_HOST: ${OBJECT_STORAGE_HOST:-object-storage-host}
      QR_CODE_DEFAULT_LOCALE: "de"
      GCP_CONFIG_PATH: "./.gcp-config.json"
      # Please create a new secret for production runs:
      # - Use `mix phx.gen.secret` if you have elixir and phoenix installed
      # - Use `openssl rand -base64 64 | head -c 64` on a normal unix system
      # You can override this in `docker-compose.override.yml`
      SECRET_KEY_BASE: "generate_your_own_secret_key_base_and_save_it"
      URL_HOST: localhost
      URL_SCHEME: http
      URL_PORT: "8000"
    ports:
      - "4100:8000"
    depends_on:
      - postgres
      - minio
    # volumes:
    # Ensure that the file `gcp-config.json` is available in the container/
    #
    # How to get the fiel `docker-compose-kits.yml`?
    # - Go to Coogle Cloud Platform dashboard
    # - On the lefthand side, go to `APIs und Dienste` -> `Anmeldedaten`
    # - In the upper section, click on `+ Anmeldedaten erstellen`
    # - If not already existing, create a service account (Dienstkonto)
    # - Afterwards, click on the newly created service account
    # - In the details sectino of the service account, click on keys (Schl端ssel)
    # - In the key section of the service account click on `Schl端ssel hinzuf端gen` -> `Neuen Schl端ssel erstellen`
    # - In the creatino dialog choose as key type `json` and finish creation of the .gcp-config.json
    # - Please .gcp-config.json in the root of this project and let the following line inject this file into the docker container
    # - ./.gcp-config.json:/app/.gcp-config.json

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-qrstorage-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-qrstorage-password}
      POSTGRES_DB: ${POSTGRES_DB:-qrstorage-dev}
      PGDATA: /var/lib/postgresql/data/pgdata
    restart: always
    # Exposing the port is not needed unless you want to access this database instance from the host.
    # Be careful when other postgres docker container are running on the same port
    # ports:
    #   - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata

  minio:
    image: minio/minio:RELEASE.2024-02-17T01-15-57Z
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_USER:-minio-user}
      - MINIO_ROOT_PASSWORD=${MINIO_USER_PASSWORD:-minio-user-password}
    volumes:
      - minio_data:/data
    ports:
      # this is for the admin console:
      - 9001:9001

volumes:
  minio_data:
  postgres_data:
